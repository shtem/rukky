program -> decl_list EOF
decl_list -> decl_list decl
            | decl
decl -> stmt 
        | func_decl

var_type -> "real"
            | "bool"
            | "str"
            | "obj"
func_type -> "void"
            | decl_type
func_decl -> "::" func_type ID ":=" "(" params ")" block 

params -> param_list
        | epsilon
param_list -> param_list "," param
            | param
param -> decl_type ID

block -> "{" EOL stmt_list "}" EOL
        | "{" EOL "}" EOL
        | "{}" EOL
stmt_list -> stmt_list stmt
            | stmt
stmt -> decl_stmt
        | expr_stmt
        | for_stmt
        | while_stmt
        | give_stmt
        | if_stmt
        | return_stmt
        | break_stmt
        | cont_stmt

decl_type -> var_type
            | var_type "[]"
decl_stmt -> decl_type ID EOL
            | decl_type ID ":=" expr EOL
expr_stmt -> expr EOL
            | EOL

for_stmt -> "for" "::" ID ":=" expr ";" expr ";" expr block
while_stmt -> "while" "::" expr block
give_stmt -> "give" "::" "(" ID "," ID ")" ";" ID block

if_stmt -> "if" "::" expr block elif_stmt_list else_stmt
elif_stmt_list -> elif_stmt_list elif_stmt
                | elif_stmt
elif_stmt -> "elif" "::" expr block
            | epsilon
else_stmt -> "else" "::" block
            | epsilon

return_stmt -> "return" "::" EOL
            | "return" "::" expr EOL
break_stmt -> "break" "::" EOL
cont_stmt -> "continue" "::" EOL

expr -> ID ":=" expr
        | ID "@" expr ":=" expr
        | ID "<<" expr
        | disjunc
disjunc -> disjunc "||" conjunc
        | conjunc
conjunc -> conjunc "&&" equiv
        | equiv
equiv -> equiv "<>" ineq
        | equiv "<!" ineq
        | ineq
ineq -> ineq "<=" term
        | ineq "<" term
        | ineq ">=" term
        | ineq ">" term
        | term
term -> term "+" factor
        | term "-" factor
        | factor
factor -> factor "*" pow
        | factor "/" pow
        | factor "//" pow
        | factor "%" pow
        | pow
pow -> pow "^" elem 
        | elem
elem -> "-" elem
        | "~" elem
        | "(" expr ")"
        | "[" args "]"
        | "{" map "}"
        | ID
        | ID ":" args "::"
        | ID "[" expr "]"
        | REAL_LIT
        | BOOL_LIT
        | STRING_LIT

args -> arg_list
        | epsilon
arg_list -> arg_list "," expr
        | expr

map -> pair_list
        | epsilon
pair_list -> pair_list "," pair 
        | pair 
pair -> expr "->" expr

epsilon -> 